local hex_size
local boardwidth
local boardheight
local extrawidth
local extraheight

function init(self)
	hex_size = go.get("/game#board", "hex_size")
	boardwidth = go.get("/game#board", "boardwidth")
	boardheight = go.get("/game#board", "boardheight")
	extrawidth = go.get("/game#board", "extrawidth")
	extraheight = go.get("/game#board", "extraheight")
	map_type = go.get("/game#board", "map_type")
	--have to do upper things  because
	--init_locals_from_properties("/game#board") 		doesnt work apparently
	self.corrupted_board = {}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function return_coords_from_hex_index(self, x, y)
	local pos = vmath.vector3(0, 0, 0)
	pos.x = 64+hex_size*x +extrawidth
	pos.y = 64+3*hex_size*y/4 +extraheight
	if y%2==1 then
		pos.x = pos.x + hex_size/2
	end
	return pos
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_corruption") then
		for x = 0, boardwidth-1 do
			self.corrupted_board[x] = {}
		end
	elseif message_id == hash("corrupt") then
		if not self.corrupted_board[message.tile_x][message.tile_y] then
			pos = return_coords_from_hex_index(self, message.tile_x, message.tile_y)
			corrupted_id = factory.create("#corruption_factory", pos)
			self.corrupted_board[message.tile_x][message.tile_y] = {id = corrupted_id}
		end
	elseif message_id == hash("uncorrupt") then
		go.delete(self.corrupted_board[message.tile_x][message.tile_y].id)
	elseif message_id == hash("corruption_iteration") then
		
	end 
end

function on_input(self, action_id, action)
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
