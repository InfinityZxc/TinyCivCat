local hex_size
go.property("hex_size", 128)
local boardwidth
go.property("boardwidth", 10)
local boardheight
go.property("boardheight", 10)
local extrawidth
go.property("extrawidth", 10)
local extraheight
go.property("extraheight", 10)
local start_hex_pos =  vmath.vector3(5,4,0)
local wood_score = 0
local water_score = 0
local rock_score = 0
local wood_income = 0
local water_income = 0
local rock_income = 0
local bonus_limit = 6
local income = 0
local bonus = 0
local brick_income = 0
local tile_types = { hash("green"),hash("green"),hash("green"),hash("green"),hash("green"), 
hash("blue"),hash("blue"),hash("blue"), hash("wood"), hash("wood"), hash("wood") }
local darkness_size = 2
local darkness_begin = 0
local turn_counter = 0
local moving_tile_id = nil
local moving_tile_offset = nil
local map_type = hash("hex")
go.property("map_type", hash("hex"))
local corruption_beginning = 10

function init(self)
	msg.post(".", "acquire_input_focus")
	
	-- in case here are some settings that affect properties
	init_locals_from_properties("#")
	
	self.board = new_board()
	timer.delay(0.8, false, function ()
		msg.post("/gui#tile_stack", "acquire_input_focus")
	end)
	msg.post("/corruption", "start_corruption")
end

function init_locals_from_properties(from_where)
	hex_size = go.get(from_where, "hex_size")
	boardwidth = go.get(from_where, "boardwidth")
	boardheight = go.get(from_where, "boardheight")
	extrawidth = go.get(from_where, "extrawidth")
	extraheight = go.get(from_where, "extraheight")
	map_type = go.get(from_where, "map_type")
end

function check_coord(x, y)
	if map_type == hash("hex") then
		-- looks a bit like hex(octagon actually, but we need more height), requires some rework, but you get the idea
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight or
		x + y < 3 or math.abs(boardwidth - 1 - x) + y < 3 or
		x + math.abs(boardheight - 1 - y) < 3 or math.abs(boardwidth - 1 - x) + math.abs(boardheight - 1 - y) < 3) then
			return false
		end
		return true
	else
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight) then
			return false
		end
		return true
	end
end

function dfs(self, used, x, y, type) 
	used[x][y] = 1
	if income > 0 and bonus < bonus_limit then 
		bonus = bonus + 1
	end
	income = income + 1
	if check_coord(x, y) and y % 2 == 0 then
		if check_coord(x - 1, y) and used[x-1][y] == 0 and self.board[x-1][y].tile_type == type then
			dfs(self, used, x - 1, y, type)
		end
		if check_coord(x + 1, y) and used[x+1][y] == 0 and self.board[x+1][y].tile_type == type then
			dfs(self, used, x + 1, y, type)
		end
		if check_coord(x - 1, y + 1) and used[x-1][y+1] == 0 and self.board[x-1][y+1].tile_type == type then
			dfs(self, used, x - 1, y + 1, type)
		end
		if check_coord(x, y + 1) and used[x][y+1] == 0 and self.board[x][y+1].tile_type == type then
			dfs(self, used, x, y + 1, type)
		end
		if check_coord(x - 1, y - 1) and used[x-1][y-1] == 0 and self.board[x-1][y-1].tile_type == type then
			dfs(self, used, x - 1, y - 1, type)
		end
		if check_coord(x, y - 1) and used[x][y-1] == 0 and self.board[x][y-1].tile_type == type then
			dfs(self, used, x, y - 1, type)
		end
	elseif check_coord(x, y)  and y % 2 == 1 then 
		if check_coord(x - 1, y) and used[x-1][y] == 0 and self.board[x-1][y].tile_type == type then
			dfs(self, used, x - 1, y, type)
		end
		if check_coord(x + 1, y) and used[x+1][y] == 0 and self.board[x+1][y].tile_type == type then
			dfs(self, used, x + 1, y, type)
		end
		if check_coord(x + 1, y + 1) and used[x+1][y+1] == 0 and self.board[x+1][y+1].tile_type == type then
			dfs(self, used, x + 1, y + 1, type)
		end
		if check_coord(x, y + 1) and used[x][y+1] == 0 and self.board[x][y+1].tile_type == type then
			dfs(self, used, x, y + 1, type)
		end
		if check_coord(x, y - 1) and used[x][y-1] == 0 and self.board[x][y-1].tile_type == type then
			dfs(self, used, x, y - 1, type)
		end
		if check_coord(x + 1, y - 1) and used[x + 1][y-1] == 0 and self.board[x + 1][y-1].tile_type == type then
			dfs(self, used, x + 1, y - 1, type)
		end
	end
end

function tile_group(self, type)
	local used = {}
	for i = 0,boardwidth-1 do
		used[i] = {}
		for j = 0,boardheight-1 do
			used[i][j] = 0
		end
	end
	bonus = 0
	income = 0
	reset_income(type)
	for i = 0, boardwidth - 1 do 
		for j = 0, boardheight - 1 do
			if (self.board[i][j].tile_type == type and used[i][j] == 0) then
				dfs(self, used, i, j, type)
				update_income(type)
				bonus = 0
				income = 0
			end
		end
	end
end

function score_calculation(self, new_type, old_type)
	tile_group(self, new_type)
	wood_score = wood_score + wood_income
	water_score = water_score + water_income
	rock_score = rock_score + rock_income
	label.set_text("#score_wood", water_score)
end

function reset_income (type)
	if type == hash("wood") then
		wood_income = 0
	elseif type == hash("blue") then
		water_income = 0
	elseif type == hash("rock") then
		rock_income = 0
	end
end

function update_income (type)
	if type == hash("wood") then
		wood_income = wood_income + income + bonus
	elseif type == hash("blue") then
		water_income = water_income + income + bonus
	elseif type == hash("rock") then
		rock_income = rock_income + income + bonus
	end
	
end

function new_board()
	local new_board = {}
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	
	for x = 0,boardwidth-1 do
		pos.x = 64+hex_size*x +extrawidth
		new_board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = 64+3*hex_size*y/4 +extraheight
			if y%2==1 then
				pos.x = pos.x + hex_size/2
			end
			local tile_type = hash("green")
			local id_tile

			--[[ for check_coord tests 
			if check_coord(x, y) then
				id_tile = factory.create("#hex_factory", pos, null, {tile_type = tile_type})
			end 
			]]
			
			
			if x ==  start_hex_pos.x and y ==  start_hex_pos.y then
				id_tile = factory.create("#hex_factory", pos, null, {tile_type = tile_type})
			else
				id_tile = nil
			end
			
			
			new_board[x][y] = {id = id_tile, x = x, y = y, tile_pos_x = pos.x, tile_pos_y = pos.y, tile_type = tile_type, corrupted = false}
			if y%2==1 then
				pos.x = pos.x - hex_size/2
			end

			if check_coord(x, y) then
				pos.y = 64+3*hex_size*y/4+extraheight
				if y%2==1 then
					pos.x = pos.x + hex_size/2
				end

				pos.x = pos.x + hex_size/2
				pos.y = pos.y + hex_size/4
				--factory.create("#corner_point_factory", pos, null)
				pos.y = pos.y - hex_size/2
				factory.create("#corner_point_factory", pos, null)
				pos.x = pos.x - hex_size/2
				pos.y = pos.y - hex_size/4
				factory.create("#corner_point_factory", pos, null)
				pos.y = pos.y + hex_size/2
				if y%2==1 then
					pos.x = pos.x - hex_size/2
				end
			end
		end
	end
	return new_board
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function corruption_iteration(self)
	if turn_counter > corruption_beginning then
		local max_corrupted_around = 0
		local max_cor_ar_pos = start_hex_pos
		local candidates = {}
		for x = 0, boardwidth-1 do
			for y = 0, boardheight-1 do
				if check_coord(x, y) and self.board[x][y].id and not self.board[x][y].corrupted then
					local around_corrupted_count = 0
					if check_coord(x+1, y) and self.board[x+1][y].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					if check_coord(x-1, y) and self.board[x-1][y].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					if check_coord(x, y+1) and self.board[x][y+1].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					if check_coord(x, y-1) and self.board[x][y-1].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					local sdvig = -1 + (y%2)*2
					if check_coord(x+sdvig, y+1) and self.board[x+sdvig][y+1].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					if check_coord(x+sdvig, y-1) and self.board[x+sdvig][y-1].corrupted then
						around_corrupted_count = around_corrupted_count+1
					end
					if around_corrupted_count == max_corrupted_around then
						table.insert(candidates, vmath.vector3(x,y,0))
					elseif around_corrupted_count > max_corrupted_around then
						max_corrupted_around = around_corrupted_count
						candidates = {}
						table.insert(candidates, vmath.vector3(x,y,0))
					end
				end
			end
		end
		local coords_to_corrupt = candidates[math.random(#candidates)]
		self.board[coords_to_corrupt.x][coords_to_corrupt.y].corrupted = true;
		msg.post("/corruption", "corrupt", {tile_x = coords_to_corrupt.x, tile_y = coords_to_corrupt.y})
	elseif turn_counter == corruption_beginning then
		self.board[start_hex_pos.x][start_hex_pos.y].corrupted = true;
		msg.post("/corruption", "corrupt", {tile_x = start_hex_pos.x, tile_y = start_hex_pos.y})
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("next_turn") then
		turn_counter = turn_counter + 1
		corruption_iteration(self)
		
	elseif message_id == hash("new_tile") then
		moving_tile_id = factory.create("#hex_factory", message["position"], null, {tile_type = message["type"]})
		moving_tile_offset = message["offset"]
	elseif message_id == hash("update_tile") then
		self.board[message.x][message.y].tile_type = message.new_type
		score_calculation(self, message.new_type, message.old_type)
	end
end

function return_hex_index_from_coords(self, x, y)
	local tmp_y = y - extraheight
	local tmp_x = x - extrawidth
	tmp_y = math.floor(tmp_y/(hex_size*3/4))
	tmp_x = math.floor(tmp_x/(hex_size))
	for i = (tmp_x - 1), tmp_x do
		for j = (tmp_y - 1), tmp_y do
			if i >= 0 and j >= 0 and i <= boardwidth-1 and j <= boardheight-1 then
				local pos_x = self.board[i][j].tile_pos_x
				local pos_y = self.board[i][j].tile_pos_y
				if ((pos_x-x)^2 + (pos_y-y)^2) <= (hex_size/2)^2 then
					return i, j
				end
			end
		end
	end
	return -1, -1
end

local score = 0

function return_coords_from_hex_index(self, x, y)
	local pos = vmath.vector3(0, 0, 0)
	pos.x = 64+hex_size*x +extrawidth
	pos.y = 64+3*hex_size*y/4 +extraheight
	if y%2==1 then
		pos.x = pos.x + hex_size/2
	end
	return pos
end

function close_hex_number(self, x, y)
	local close_hex = 0
	if check_coord(x+1, y) and self.board[x+1][y].id then
		close_hex = close_hex + 1
	end
	if check_coord(x-1, y) and self.board[x-1][y].id then
		close_hex = close_hex + 1
	end
	if check_coord(x, y+1) and self.board[x][y+1].id then
		close_hex = close_hex + 1
	end
	if check_coord(x, y-1) and self.board[x][y-1].id then
		close_hex = close_hex + 1
	end
	local sdvig = -1 + (y%2)*2
	if check_coord(x+sdvig, y+1) and self.board[x+sdvig][y+1].id then
		close_hex = close_hex + 1
	end
	if check_coord(x+sdvig, y-1) and self.board[x+sdvig][y-1].id then
		close_hex = close_hex + 1
	end
	return close_hex
end

function on_input(self, action_id, action)
	-- print("board input")
	if action_id == hash("touch_left") and moving_tile_id then
		if action.released then
			local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
			local moving_tile_url = msg.url(moving_tile_id)
			moving_tile_url.fragment = "tile"
			local tile_type = go.get(moving_tile_url, "tile_type")
			if check_coord(tile_x, tile_y) and not self.board[tile_x][tile_y].id and close_hex_number(self, tile_x, tile_y)>0 then
				local pos = return_coords_from_hex_index(self, tile_x, tile_y)
				go.animate(moving_tile_id, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 0.4)
				self.board[tile_x][tile_y] = {id = moving_tile_id, x = tile_x, y = tile_y, tile_pos_x = pos.x, tile_pos_y = pos.y, tile_type = tile_type, corrupted = false}
				score_calculation(self, tile_type, hash("none"))
				msg.post("#", "next_turn")
				msg.post("/gui#tile_stack", "gui_new_tile")
			else
				go.delete(moving_tile_id)
				msg.post("/gui#tile_stack", "gui_revert_tile", {tile_type=tile_type})
			end
			moving_tile_id = nil
		else
			local pos = vmath.vector3(action.x, action.y, 0)
			go.set_position(pos - moving_tile_offset, moving_tile_id)
		end
		return true
	end
		
	if action_id == hash("touch_left") and action.pressed then
		local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
		label.set_text("#score_x", tile_x)
		label.set_text("#score_y", tile_y)
		if tile_x >= 0 and tile_y >=0 and self.board[tile_x][tile_y].id then
			msg.post(self.board[tile_x][tile_y].id, "change_type", {x = tile_x, y = tile_y})
		else
			msg.post("#", "move_darkness")
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
