local hex_size
go.property("hex_size", 128)
local boardwidth
go.property("boardwidth", 10)
local boardheight
go.property("boardheight", 9)
local extrawidth
go.property("extrawidth", 200)
local extraheight
go.property("extraheight", 100)
local initial_delay_cost = 70
local initial_uncorrupt_cost = 70
local delay_cost = 70
local uncorrupt_cost = 70
local ability_cost_increase = 10
local coins = 0
local coin_income = 0
local corruption_delay = 0
local start_hex_pos =  vmath.vector3(4,4,0)
local first_corruption_hex_pos = vmath.vector3(4,4,0)
local wood_score = 0
local water_score = 0
local rock_score = 0
local wood_income = 0
local water_income = 0
local rock_income = 0
local bonus_limit = 6
local income = 0
local bonus = 0
local turn_counter = 0
local moving_tile_id = nil
local moving_tile_offset = nil
local map_type = hash("hex")
go.property("map_type", hash("hex"))
local corruption_beginning = 15
local corruption_acceleration = 10
local unhash = {
	[hash("wood")] = "wood",
	[hash("rock")] = "rock",
	[hash("broken_rock")] = "broken_rock",
	[hash("water")] = "water"
}
local thunder = false
local thunder_active = false
local snow = false
local stats_visibility = false
local possible_moves_shown = false
local village_count = 0
local village_next_id = 1
local big_constant = 420


function init(self)
	msg.post(".", "acquire_input_focus")
	defos.disable_window_resize()
	-- in case here are some settings that affect properties
	init_locals_from_properties("#")
	
	self.board = new_board()
	make_possible_moves_around(self, start_hex_pos.x, start_hex_pos.y)
	make_possible_moves_around(self, start_hex_pos.x + 1, start_hex_pos.y)
	create_grid(self)
	
	self.villages = {}
	
	score_calculation(self, hash("none"), hash("none"))
	timer.delay(0.1, false, function ()
		msg.post("/gui#main", "acquire_input_focus")
	end)
	timer.delay(0.1, false, function ()
		msg.post("/tutorial#tutorial", "acquire_input_focus")
	end)
	msg.post("/gui#main", "gui_set_thunder_cost", {cost = uncorrupt_cost})
	msg.post("/gui#main", "gui_set_snow_cost", {cost = delay_cost})
end

function create_grid(self)
	self.grid = {}
	local pos = vmath.vector3()
	for x = 0,boardwidth-1 do
		pos.x = 64+hex_size*x +extrawidth
		self.grid[x] = {}
		for y = 0,boardheight-1 do
			if check_coord(x, y) then
				pos.y = 64+3*hex_size*y/4+extraheight
				if y%2==1 then
					pos.x = pos.x + hex_size/2
				end
				pos.z = 1 / (y + 3)
				pos.z = pos.z / 2
				local grid_id = factory.create("/game#boundaries_factory", pos, null)
				self.grid[x][y] = {id = grid_id}
				if y%2==1 then
					pos.x = pos.x - hex_size/2
				end
			end
		end
	end
end

function init_locals_from_properties(from_where)
	hex_size = go.get(from_where, "hex_size")
	boardwidth = go.get(from_where, "boardwidth")
	boardheight = go.get(from_where, "boardheight")
	extrawidth = go.get(from_where, "extrawidth")
	extraheight = go.get(from_where, "extraheight")
	map_type = go.get(from_where, "map_type")
end

function check_coord(x, y)
	if map_type == hash("hex") then
		-- looks a bit like hex(octagon actually, but we need more height), requires some rework, but you get the idea
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight or
		x + y < 3 or math.abs(boardwidth - 1 - x) + y < 3 or
		x + math.abs(boardheight - 1 - y) < 3 or math.abs(boardwidth - 1 - x) + math.abs(boardheight - 1 - y) < 3 or 
		(y%2 == 0 and x == 0) or (y%2 == 1 and x == 9)) and
		not (x == 0 and y == 4) and 
		not (x == 1 and y == 1) and 
		not (x == 2 and y == 0) and 
		not (x == 1 and y == 7) and 
		not (x == 2 and y == 8) and 
		not (x == 7 and y == 8) and 
		not (x == 7 and y == 0)
		then
			return false
		end
		return true
	else
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight) then
			return false
		end
		return true
	end
end

function is_hex_valid_dfs(self, used, x, y, type)
	return check_coord(x, y) and self.board[x][y].id and used[x][y] == 0 and self.board[x][y].tile_type == type and not self.board[x][y].corrupted
end
--[[
function spawn_coins(self, x, y, bonus_zero_one, type)
	if turn_counter > 0 and turn_counter < 4 then
		local pos = vmath.vector3(self.board[x][y].tile_pos_x, self.board[x][y].tile_pos_y, 1)
		local coins_needed = 0  -- maximum 10 or some will be invisible
		pos.z = pos.z - 0.1
		if type == hash("wood") then
			coins_needed = 3 + bonus_zero_one
		elseif type == hash("water") then
			coins_needed = 1 + 3 * bonus_zero_one
		elseif type == hash("rock") then
			coins_needed = 2 + 2 * bonus_zero_one
		end
		for coin_number = 1, coins_needed do
			local delay = coin_number * 3 / 10 -- + (((x + y) / 10) % 1) / 2
			pos.z = pos.z + 0.01
			timer.delay(delay, false, function ()
				factory.create("#coin_factory", pos, null)
			end)
		end
	end
	local coins_needed = 0
	if type == hash("wood") then
		coins_needed = 3 + bonus_zero_one
	elseif type == hash("water") then
		coins_needed = 1 + 3 * bonus_zero_one
	elseif type == hash("rock") then
		coins_needed = 2 + 2 * bonus_zero_one
	end
	label.set_text(msg.url(nil, self.board[x][y].id, "production_label"), coins_needed)
end
--]]
function spawn_resource(self, x, y)
	if self.board[x][y].id and not self.board[x][y].corrupted then
		local pos = vmath.vector3(self.board[x][y].tile_pos_x, self.board[x][y].tile_pos_y, 1)
		pos.z = pos.z - 0.1
		timer.delay(0.5, false, function ()
			factory.create("#coin_factory", pos, null, {type = self.board[x][y].tile_type})
		end)
	end
end

function dfs(self, used, x, y, type) 
	used[x][y] = 1
	if income > 0 and bonus < bonus_limit then 
		bonus = bonus + 1
		--spawn_coins(self, x, y, 1, type);
	else
		--spawn_coins(self, x, y, 0, type);
	end
	income = income + 1
	if check_coord(x, y) and y % 2 == 0 and not self.board[x][y].corrupted then
		if is_hex_valid_dfs(self, used, x-1, y, type) then
			dfs(self, used, x - 1, y, type)
		end
		if is_hex_valid_dfs(self, used, x+1, y, type) then
			dfs(self, used, x + 1, y, type)
		end
		if is_hex_valid_dfs(self, used, x-1, y + 1, type) then
			dfs(self, used, x - 1, y + 1, type)
		end
		if is_hex_valid_dfs(self, used, x, y + 1, type) then
			dfs(self, used, x, y + 1, type)
		end
		if is_hex_valid_dfs(self, used, x-1, y - 1, type) then
			dfs(self, used, x - 1, y - 1, type)
		end
		if is_hex_valid_dfs(self, used, x, y - 1, type) then
			dfs(self, used, x, y - 1, type)
		end
	elseif check_coord(x, y)  and y % 2 == 1 and not self.board[x][y].corrupted then 
		if is_hex_valid_dfs(self, used, x-1, y, type) then
			dfs(self, used, x - 1, y, type)
		end
		if is_hex_valid_dfs(self, used, x+1, y, type) then
			dfs(self, used, x + 1, y, type)
		end
		if is_hex_valid_dfs(self, used, x+1, y+1, type) then
			dfs(self, used, x + 1, y + 1, type)
		end
		if is_hex_valid_dfs(self, used, x, y+1, type) then
			dfs(self, used, x, y + 1, type)
		end
		if is_hex_valid_dfs(self, used, x, y-1, type) then
			dfs(self, used, x, y - 1, type)
		end
		if is_hex_valid_dfs(self, used, x+1, y-1, type) then
			dfs(self, used, x + 1, y - 1, type)
		end
	end
end

function tile_group(self, type)
	local used = {}
	for i = 0,boardwidth-1 do
		used[i] = {}
		for j = 0,boardheight-1 do
			used[i][j] = 0
		end
	end
	bonus = 0
	income = 0
	reset_income(type)
	for i = 0, boardwidth - 1 do 
		for j = 0, boardheight - 1 do
			if is_hex_valid_dfs(self, used, i, j, type)then
				dfs(self, used, i, j, type)
				update_income(type)
				bonus = 0
				income = 0
			end
		end
	end
end

function score_calculation(self, new_type, old_type)
	tile_group(self, hash("wood"))
	wood_score = wood_score + wood_income
	coin_income = wood_income
	tile_group(self, hash("water"))
	water_score = water_score + water_income
	coin_income = coin_income + water_income
	tile_group(self, hash("rock"))
	rock_score = rock_score + rock_income
	coin_income = coin_income + rock_income
	coins = coins + coin_income
	msg.post("/gui#main", "gui_set_coins", {coins = coins})
	msg.post("/gui#main", "gui_set_income", {income = coin_income})
end

function reset_income (type)
	if type == hash("wood") then
		wood_income = 0
	elseif type == hash("water") then
		water_income = 0
	elseif type == hash("rock") then
		rock_income = 0
	end
end

function update_income (type)
	if type == hash("wood") then
		wood_income = wood_income + 3 * income + bonus
	elseif type == hash("water") then
		water_income = water_income + income + 3 * bonus
	elseif type == hash("rock") then
		rock_income = rock_income + 2 * income + 2 * bonus
	end
end

function heal_cell(self, x, y)
	if (coins >= uncorrupt_cost) and self.board[x][y].corrupted then
		self.board[x][y].corrupted = false;
		msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = self.board[x][y].tile_type})
		score_calculation(self, hash("none"), hash("none"))
		coins = coins - coin_income
		coins = coins - uncorrupt_cost
		uncorrupt_cost = uncorrupt_cost + ability_cost_increase
		msg.post("/gui#main", "gui_set_thunder_cost", {cost = uncorrupt_cost})
		msg.post("/gui#main", "gui_set_snow_cost", {cost = delay_cost})
		msg.post("/gui#main", "gui_set_coins", {coins = coins})
		if not snow then
			if coins >= delay_cost then
				msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake")})
			else
				msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake_used")})
			end
		end
		if village_count >= 0 then
			if self.board[x][y].distance_to_village ~= big_constant then
				msg.post(msg.url(nil, self.villages[self.board[x][y].village_num].id, "village"), "get_resource", 
				{tile_type = self.board[x][y].tile_type, radius = self.board[x][y].distance_to_village, x = x , y = y})
			end
		end
	end
end

function delay_corrupt(self)
	if coins >= delay_cost then
		snow = true
		corruption_delay = 1
		coins = coins - delay_cost
		delay_cost = delay_cost + ability_cost_increase
		msg.post("/gui#main", "gui_set_thunder_cost", {cost = uncorrupt_cost})
		msg.post("/gui#main", "gui_set_snow_cost", {cost = delay_cost})
		msg.post("/gui#main", "gui_set_coins", {coins = coins})
		msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake_active")})
		for x = 0,boardwidth-1 do
			for y = 0,boardheight-1 do
				if self.board[x][y].corrupted then
					local type = unhash[self.board[x][y].tile_type]
					if type == "rock" then
						type = "broken_rock"
					end
					msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("bugged_" .. type .. "-" .. math.random(1, 5))})
				end
			end
		end
		if not thunder then
			if coins >= uncorrupt_cost then
				msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder")})
			else
				msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_used")})
			end
		end
	end
end

function new_board()
	math.randomseed(os.clock())
	local new_board = {}
	local pos = vmath.vector3()
	local x = 0
	local y = 0
	local starting_set = {hash("rock"), hash("wood")}
	for x = 0,boardwidth-1 do
		pos.x = 64+hex_size*x +extrawidth
		new_board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = 64+3*hex_size*y/4 +extraheight
			if y%2==1 then
				pos.x = pos.x + hex_size/2
			end
			local tile_type = hash("rock")
			local id_tile
			--[[  for check_coord tests
			if check_coord(x, y) then
				id_tile = factory.create("#hex_factory", pos, null, {tile_type = tile_type})
			end 
			--]]
			if (x == start_hex_pos.x or x == start_hex_pos.x +1) and y == start_hex_pos.y then
				random_pick = math.random(#starting_set)
				tile_type = starting_set[random_pick]
				if tile_type == hash("wood") then
					first_corruption_hex_pos = vmath.vector3(x,y,0)
				end
				table.remove(starting_set, random_pick)
				pos.z = 1 / (y + 3)
				id_tile = factory.create("#hex_factory", pos, null, {tile_type = tile_type})
			else
				id_tile = nil
			end
			new_board[x][y] = {id = id_tile, x = x, y = y, tile_pos_x = pos.x, tile_pos_y = pos.y, tile_type = tile_type, corrupted = false, possible_move = false,
			distance_to_village = big_constant, village_center_x = nil, village_center_y = nil, village_num = nil}
			if y%2==1 then
				pos.x = pos.x - hex_size/2
			end
		end
	end
	return new_board
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function clear_corruption(self, completely)
	for x = 0,boardwidth-1 do
		for y = 0,boardheight-1 do
			if self.board[x][y].id then
				if completely then
					if self.board[x][y].corrupted then
						self.board[x][y].corrupted = false;
						msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = self.board[x][y].tile_type})
					end
				else
					if self.board[x][y].corrupted then
						local type = unhash[self.board[x][y].tile_type]
						if type == "rock" then
							self.board[x][y].corrupted = nil;
							msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("broken_rock")})
						else
							self.board[x][y].corrupted = false;
							msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = self.board[x][y].tile_type})
						end
					end
				end
			end
		end
	end
end

function corrupt_tile(self, x, y, completely)
	local type = unhash[self.board[x][y].tile_type]
	if type == "rock" then
		if self.board[x][y].corrupted == false and not completely then
			self.board[x][y].corrupted = nil
			msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("broken_rock")})
		else
			type = "broken_rock"
			self.board[x][y].corrupted = true;
			msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("bugged_" .. type)})
		end
	else
		self.board[x][y].corrupted = true;
		msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("bugged_" .. type)})
	end
	if village_count >= 0 then
		if self.board[x][y].distance_to_village ~= big_constant and self.board[x][y].corrupted then
			msg.post(msg.url(nil, self.villages[self.board[x][y].village_num].id, "village"), "lose_resource", 
			{tile_type = self.board[x][y].tile_type, radius = self.board[x][y].distance_to_village, x = x , y = y})
		end
	end
end

function global_bfs(self, x, y, village_num)
	local visited = {}
	local next = {}
	next[0] = {}
	next[1] = {}
	for i = 0, boardwidth-1 do
		visited[i] = {}
		for j = 0, boardheight-1 do
			visited[i][j] = 0
		end
	end
	local depth = 0
	table.insert(next[depth%2], {next_x = x, next_y = y})
	while #next[0] ~= 0 or #next[1] ~= 0 do
		for next_hex_num = 1, #next[depth%2] do
			bfs_handle_hex(self, next_hex_num, next, depth, x, y, visited, village_num)
		end
		next[depth%2] = {}
		depth = depth + 1
	end
end

function bfs_handle_hex(self, hex_number, next, depth, village_x, village_y, visited, village_num)
	local x = next[depth%2][hex_number].next_x
	local y = next[depth%2][hex_number].next_y
	visited[x][y] = 1
	if depth <= self.board[x][y].distance_to_village then
		if depth < self.board[x][y].distance_to_village then
			self.board[x][y].distance_to_village = depth
			self.board[x][y].village_center_x = village_x
			self.board[x][y].village_center_y = village_y
			self.board[x][y].village_num = village_num
			if check_coord(x, y) and self.board[x][y].id then
				label.set_text(msg.url(nil, self.board[x][y].id, "production_label"), depth .. "  " .. village_num)
			end
		end
		local sdvig = -1 + (y%2)*2
		if check_coord(x+1, y) and visited[x+1][y] == 0 then
			visited[x+1][y] = 1
			table.insert(next[(depth+1)%2], {next_x = x+1, next_y = y})
		end
		if check_coord(x-1, y) and visited[x-1][y] == 0 then
			visited[x-1][y] = 1
			table.insert(next[(depth+1)%2], {next_x = x-1, next_y = y})
		end
		if check_coord(x, y+1) and visited[x][y+1] == 0 then
			visited[x][y+1] = 1
			table.insert(next[(depth+1)%2], {next_x = x, next_y = y+1})
		end
		if check_coord(x, y-1) and visited[x][y-1] == 0 then
			visited[x][y-1] = 1
			table.insert(next[(depth+1)%2], {next_x = x, next_y = y-1})
		end
		if check_coord(x+sdvig, y+1) and visited[x+sdvig][y+1] == 0 then
			visited[x+sdvig][y+1] = 1
			table.insert(next[(depth+1)%2], {next_x = x+sdvig, next_y = y+1})
		end
		if check_coord(x+sdvig, y-1) and visited[x+sdvig][y-1] == 0 then
			visited[x+sdvig][y-1] = 1
			table.insert(next[(depth+1)%2], {next_x = x+sdvig, next_y = y-1})
		end
	end
end

function grow_dfs(self, village_num)

end

function abs(a)
	if a < 0 then
		return -a
	else
		return a
	end
end

function bool_hex2_arond_hex1_in_radius2(x1, y1, x2, y2)
	if (abs(y1 - y2) < 3) and  (abs(x1 - x2) < 3) and (abs(x1 - x2) + abs(y1 - y2) < 4) and
	not (x1 - x2 == (-1 + (y1%2)*2)*2 and abs(x1 - x2) == 2 and abs(y1 - y2) == 1)
	then
		return true
	else
		return false
	end
end

function village_creation(self, x, y)
	for village_num = 1, village_count do
		if bool_hex2_arond_hex1_in_radius2(self.villages[village_num].x, self.villages[village_num].y, x, y) then
			return false
		end
	end
	local pos = return_coords_from_hex_index(self, x, y)
	pos.z = 0.4
	id_village = factory.create("#village_factory", pos, null, {x = x, y = y})
	msg.post(msg.url(nil, id_village, "village"), "create_human")
	go.set(msg.url(nil, id_village, "sprite"), "scale", vmath.vector3(0.5 , 0.5, 1))
	self.villages[village_next_id] = {id = id_village, x = x, y = y, radius = 1, village_order = village_next_id}
	self.board[x][y].village_center_x = x
	self.board[x][y].village_center_y = y
	self.board[x][y].distance_to_village = 0
	self.board[x][y].village_num = village_next_id
	global_bfs(self, x, y, village_next_id)
	village_count = village_count + 1
	for i = 0, boardwidth-1 do
		for j = 0, boardheight-1 do
			if check_coord(i, j) and self.board[i][j].id and self.board[i][j].village_num == village_next_id 
			and self.board[i][j].distance_to_village == 1 and not self.board[i][j].corrupted then
				add_resource_to_villages(self, self.board[i][j].tile_type, i, j)
			end
		end
	end
	village_next_id = village_next_id + 1
end

function village_destruction(self, village_num, x, y)
	if village_num == 0 then
		village_num = self.board[x][y].village_num
	else
		x = self.villages[village_num].x
		y = self.villages[village_num].y
	end
	for i = 0, boardwidth-1 do
		for j = 0, boardheight-1 do
			if self.board[i][j].village_num == village_num then
				self.board[i][j].distance_to_village = big_constant
				self.board[i][j].village_center_x = nil
				self.board[i][j].village_center_y = nil
				self.board[i][j].village_num = nil
			end
		end
	end
	go.delete(self.villages[village_num].id)
	self.villages[village_num].id = nil
	village_count = village_count - 1
	for villages_num = 1, (#self.villages) do
		if self.villages[villages_num].id then
			global_bfs(self, x, y)
		end
	end
end

function add_resource_to_villages(self, tile_type, x, y)
	if village_count >= 0 then
		if self.board[x][y].distance_to_village ~= big_constant then
			msg.post(msg.url(nil, self.villages[self.board[x][y].village_num].id, "village"), "get_resource", 
			{tile_type = tile_type, radius = self.board[x][y].distance_to_village, x = x , y = y})
		end
	end
end

function corruption_iteration(self)
	if turn_counter > corruption_beginning and corruption_delay == 0 then
		for i = 0, math.max(0, math.floor((turn_counter-(delay_cost-initial_delay_cost)/ability_cost_increase-corruption_beginning)/corruption_acceleration)) do
			local max_corrupted_around = 0
			local max_cor_ar_pos = first_corruption_hex_pos
			local candidates = {}
			for x = 0, boardwidth-1 do
				for y = 0, boardheight-1 do
					if check_coord(x, y) and self.board[x][y].id and not self.board[x][y].corrupted and 
					self.board[x][y].tile_type ~= hash("water") then
						local around_corrupted_count = 0
						if check_coord(x+1, y) and self.board[x+1][y].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						if check_coord(x-1, y) and self.board[x-1][y].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						if check_coord(x, y+1) and self.board[x][y+1].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						if check_coord(x, y-1) and self.board[x][y-1].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						local sdvig = -1 + (y%2)*2
						if check_coord(x+sdvig, y+1) and self.board[x+sdvig][y+1].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						if check_coord(x+sdvig, y-1) and self.board[x+sdvig][y-1].corrupted then
							around_corrupted_count = around_corrupted_count+1
						end
						if self.board[x][y].distance_to_village == 1 then
							around_corrupted_count = around_corrupted_count-1
						elseif self.board[x][y].distance_to_village == 0 then
							around_corrupted_count = around_corrupted_count-2
						end
						if around_corrupted_count == max_corrupted_around then
							table.insert(candidates, vmath.vector3(x,y,0))
						elseif around_corrupted_count > max_corrupted_around then
							max_corrupted_around = around_corrupted_count
							candidates = {}
							table.insert(candidates, vmath.vector3(x,y,0))
						end
					end
				end
			end
			if (#candidates ~= 0) then
				local coords_to_corrupt = candidates[math.random(#candidates)]
				if self.board[coords_to_corrupt.x][coords_to_corrupt.y].distance_to_village == 0 then
					village_destruction(self, 0, coords_to_corrupt.x, coords_to_corrupt.y)
				end
				corrupt_tile(self, coords_to_corrupt.x, coords_to_corrupt.y, false)
			else
				msg.post("/end_screen#game_end", "game_lost")
			end
		end
	elseif turn_counter == corruption_beginning then
		corrupt_tile(self, first_corruption_hex_pos.x, first_corruption_hex_pos.y, true)
	else
		corruption_delay = math.max(0, corruption_delay - 1)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("ability") then
		if not snow and message["ability"] == hash("snow") then
			delay_corrupt(self)
		elseif not thunder and message["ability"] == hash("thunder") and coins >= uncorrupt_cost then
			thunder_active = true
			msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_active")})
		end
	elseif message_id == hash("next_turn") then
		add_resource_to_villages(self, message["tile_type"], message["x"], message["y"])
		
		if self.board[message["x"]][message["y"]].village_num ~= nil then
			label.set_text(msg.url(nil, self.board[ message["x"]][message["y"]].id, "production_label"), 
			self.board[message["x"]][message["y"]].distance_to_village .. "  " .. self.board[message["x"]][message["y"]].village_num)
		end
		
		if turn_counter/15 >= (village_next_id-1) then
			village_creation(self, message["x"], message["y"])
		end
		turn_counter = turn_counter + 1
		corruption_iteration(self)
		if turn_counter == corruption_beginning then
			msg.post("/tutorial#tutorial", "corruption")
		end
		score_calculation(self, hash("none"), hash("none"))
		if snow then
			snow = false
			for x = 0,boardwidth-1 do
				for y = 0,boardheight-1 do
					if self.board[x][y].corrupted then
						local type = unhash[self.board[x][y].tile_type]
						if type == "rock" then
							type = "broken_rock"
						end
						msg.post(msg.url(nil, self.board[x][y].id, "sprite"), "play_animation", {id = hash("bugged_" .. type)})
					end
				end
			end
		end
		thunder = false
		thunder_active = false
		if coins >= delay_cost then
			msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake")})
		else
			msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake_used")})
		end
		if coins >= uncorrupt_cost then
			msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder")})
		else
			msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_used")})
		end
		if turn_counter == 68 then
			msg.post("/end_screen#game_end", "game_won")
		end
	elseif message_id == hash("new_tile") then
		message.position.z = 1
		moving_tile_id = factory.create("#hex_factory", message["position"], null, {tile_type = message["type"]})
		moving_tile_offset = message["offset"]
	elseif message_id == hash("update_tile") then
		self.board[message.x][message.y].tile_type = message.new_type
	elseif message_id == hash("reset_game") then
		for x = 0,boardwidth-1 do
			if self.board[x] then
				for y = 0,boardheight-1 do
					if self.board[x][y] then
						if self.board[x][y].id then
							go.delete(self.board[x][y].id)
						end
					end
				end
			end
		end
		delay_cost = initial_delay_cost
		uncorrupt_cost = initial_uncorrupt_cost
		msg.post("/gui#main", "gui_set_thunder_cost", {cost = uncorrupt_cost})
		msg.post("/gui#main", "gui_set_snow_cost", {cost = delay_cost})
		msg.post("/gui#main", "set_asset", {node_id = hash("snow"), anim_id = hash("snowflake_used")})
		msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_used")})
		coins = 0
		coin_income = 0
		corruption_delay = 0
		wood_score = 0
		water_score = 0
		rock_score = 0
		wood_income = 0
		water_income = 0
		rock_income = 0
		bonus_limit = 6
		income = 0
		bonus = 0
		turn_counter = 0
		stats_visibility = false
		self.board = new_board()
		make_possible_moves_around(self, start_hex_pos.x, start_hex_pos.y)
		make_possible_moves_around(self, start_hex_pos.x + 1, start_hex_pos.y)
		score_calculation(self, hash("none"), hash("none"))
	elseif message_id == hash("clear_corruption") then
		clear_corruption(self, true)
	elseif message_id == hash("village_grow") then
		grow_bfs(self, message["id"])
	elseif message_id == hash("resource_collected") then
		spawn_resource(self, message["x"], message["y"])
	end
end

function pick_hex(hex_x, hex_y, x, y)
	local a = 64
	local b = 70
	local t = a * b / (2 * a - b)
	return math.abs(hex_x - x) < a and math.abs(hex_y - y) < a and math.abs(hex_x - x) * a + math.abs(hex_y - y) * (t + a) < a * (t + a)
end

function return_hex_index_from_coords(self, x, y)
	local tmp_y = y - extraheight
	local tmp_x = x - extrawidth
	tmp_y = math.floor(tmp_y/(hex_size*3/4))
	tmp_x = math.floor(tmp_x/(hex_size))
	for i = (tmp_x - 1), tmp_x do
		for j = (tmp_y - 1), tmp_y do
			if i >= 0 and j >= 0 and i <= boardwidth-1 and j <= boardheight-1 then
				if (pick_hex(self.board[i][j].tile_pos_x, self.board[i][j].tile_pos_y, x, y)) then
					return i, j
				end
			end
		end
	end
	return -1, -1
end

local score = 0

function return_coords_from_hex_index(self, x, y)
	local pos = vmath.vector3(0, 0, 0)
	pos.x = 64 + hex_size * x + extrawidth
	pos.y = 64 + 3 * hex_size *y / 4 + extraheight
	if y % 2 == 1 then
		pos.x = pos.x + hex_size / 2
	end
	pos.z = 1 / (y + 3)
	return pos
end

function close_hex_number(self, x, y)
	local close_hex = 0
	if check_coord(x+1, y) and self.board[x+1][y].id then
		close_hex = close_hex + 1
	end
	if check_coord(x-1, y) and self.board[x-1][y].id then
		close_hex = close_hex + 1
	end
	if check_coord(x, y+1) and self.board[x][y+1].id then
		close_hex = close_hex + 1
	end
	if check_coord(x, y-1) and self.board[x][y-1].id then
		close_hex = close_hex + 1
	end
	local sdvig = -1 + (y%2)*2
	if check_coord(x+sdvig, y+1) and self.board[x+sdvig][y+1].id then
		close_hex = close_hex + 1
	end
	if check_coord(x+sdvig, y-1) and self.board[x+sdvig][y-1].id then
		close_hex = close_hex + 1
	end
	return close_hex
end

function show_hide_moves(self)
	if possible_moves_shown then 
		for x = 0,boardwidth-1 do
			for y = 0,boardheight-1 do
				if check_coord(x, y) and not self.board[x][y].possible_move and not self.board[x][y].id then
					msg.post(msg.url(nil, self.grid[x][y].id, "boundaries"), "make_grey")
				end
			end
		end
	else
		for x = 0,boardwidth-1 do
			for y = 0,boardheight-1 do
				if check_coord(x, y) then
					msg.post(msg.url(nil, self.grid[x][y].id, "boundaries"), "make_light")
				end
			end
		end
	end
end

function make_possible_moves_around(self, x, y)
	if check_coord(x+1, y) then
		self.board[x+1][y].possible_move = true
	end
	if check_coord(x-1, y) then
		self.board[x-1][y].possible_move = true
	end
	if check_coord(x, y+1) then
		self.board[x][y+1].possible_move = true
	end
	if check_coord(x, y-1) then
		self.board[x][y-1].possible_move = true
	end
	local sdvig = -1 + (y%2)*2
	if check_coord(x+sdvig, y+1) then
		self.board[x+sdvig][y+1].possible_move = true
	end
	if check_coord(x+sdvig, y-1) then
		self.board[x+sdvig][y-1].possible_move = true
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch_left") and moving_tile_id then
		if action.released then
			local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
			local moving_tile_url = msg.url(moving_tile_id)
			moving_tile_url.fragment = "tile"
			local tile_type = go.get(moving_tile_url, "tile_type")
			if check_coord(tile_x, tile_y) and not self.board[tile_x][tile_y].id and close_hex_number(self, tile_x, tile_y)>0 then
				local pos = return_coords_from_hex_index(self, tile_x, tile_y)
				go.animate(moving_tile_id, "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 0.4)
				self.board[tile_x][tile_y] = {id = moving_tile_id, x = tile_x, y = tile_y, tile_pos_x = pos.x, tile_pos_y = pos.y, tile_type = tile_type, corrupted = false, possible_move = true,
				distance_to_village = self.board[tile_x][tile_y].distance_to_village, village_center_x = self.board[tile_x][tile_y].village_center_x, 
				village_center_y = self.board[tile_x][tile_y].village_center_y, village_num = self.board[tile_x][tile_y].village_num}
				msg.post("#", "next_turn", {tile_type = tile_type, x = tile_x, y = tile_y})
				msg.post("/gui#main", "gui_new_tile")
				if stats_visibility then
					msg.post(msg.url(nil, self.board[tile_x][tile_y].id, "tile"), "change_stats_visibility")
				end
				make_possible_moves_around(self, tile_x, tile_y)
			else
				go.delete(moving_tile_id)
				msg.post("/gui#main", "gui_revert_tile", {tile_type=tile_type})
			end
			moving_tile_id = nil
			possible_moves_shown = false
			show_hide_moves(self)
		else
			local pos = vmath.vector3(action.x, action.y, 0.5)
			go.set_position(pos - moving_tile_offset, moving_tile_id)
			if not possible_moves_shown then
				possible_moves_shown = true
				show_hide_moves(self)
			end
		end
		return true
	end
	
	if action_id == hash("touch_left") and action.released then
		local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
		if check_coord(tile_x, tile_y) and self.board[tile_x][tile_y].distance_to_village == 0 then
			msg.post(msg.url(nil, self.villages[self.board[tile_x][tile_y].village_num].id , "village"), "change_stats_visibility")
		end
	end
	
	if thunder_active and action_id == hash("touch_left") and action.pressed then
		thunder_active = false
		local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
		if check_coord(tile_x, tile_y) and self.board[tile_x][tile_y].id and self.board[tile_x][tile_y].corrupted then
			heal_cell(self, tile_x, tile_y)
			thunder = true
			msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_used")})
		else
			msg.post("/gui#main", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder")})
		end
		return true
	end
	--[[
	if action_id == hash("touch_left") and action.released then
		local tile_x, tile_y = return_hex_index_from_coords(self, action.x, action.y)
		if check_coord(tile_x, tile_y) then
			for x = 0,boardwidth-1 do
				for y = 0,boardheight-1 do
					if self.board[x][y].id then
						msg.post(msg.url(nil, self.board[x][y].id, "tile"), "change_stats_visibility")
					end
				end
			end
			stats_visibility = not stats_visibility
		end
	end
	--]]
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
