local tile_types = {hash("wood"), hash("rock"), hash("water")}
local active_node = nil
local node1, node2, node1_pos, node2_pos, shop_tile
local SHOP_ANIM_DURATION = 0.7
local end_screen = false

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	node1 = gui.get_node("gui_tile1")
	node1_pos = gui.get_position(node1)
	node2 = gui.get_node("gui_tile2")
	node2_pos = gui.get_position(node2)
	gui.play_flipbook(node1, tile_types[math.random(#tile_types)])
	gui.play_flipbook(node2, tile_types[math.random(#tile_types)])
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function show_abilities()
	local node = gui.get_node("snow")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("snow_cost")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("snow_coins")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder_cost")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder_coins")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)
end

function hide_abilities()
	local node = gui.get_node("snow")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("snow_cost")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("snow_coins")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder_cost")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("thunder_coins")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if active_node then
		if message_id == hash("gui_new_tile") then
			gui.play_flipbook(active_node, tile_types[math.random(#tile_types)])
			active_node = nil;
		elseif message_id == hash("gui_revert_tile") then
			gui.play_flipbook(active_node, message['tile_type'])
			active_node = nil;
		end
	elseif message_id == hash("set_asset") then
		gui.play_flipbook(gui.get_node(message.node_id), message.anim_id)
	elseif message_id == hash("gui_set_coins") then
		gui.set_text(gui.get_node("coins"), string.format("%d", message.coins))
	elseif message_id == hash("gui_set_income") then
		gui.set_text(gui.get_node("income"), string.format("(+%d)", message.income))
	elseif message_id == hash("gui_set_thunder_cost") then
		gui.set_text(gui.get_node("thunder_cost"), string.format("%d", message.cost))
	elseif message_id == hash("gui_set_snow_cost") then
		gui.set_text(gui.get_node("snow_cost"), string.format("%d", message.cost))
	elseif message_id == hash("show_abilities") then
		show_abilities()
	elseif message_id == hash("hide_abilities") then
		hide_abilities()
	-- elseif message_id == hash("game_won") then
	-- 	top_bar = gui.get_node("top_bar")
	-- -- 	gui.set_text(top_bar, "YOU WON!")
	-- -- 	gui.set_size(top_bar, vmath.vector3(100, 100, 0))
	-- elseif message_id == hash("game_lost") then
	-- 	top_bar = gui.get_node("top_bar")
	-- 	gui.set_text(top_bar, "YOU LOST :(")
	-- 	gui.set_size(top_bar, vmath.vector3(100, 100, 0))
	elseif message_id == hash("next_village") then
		local node = gui.get_node("in")
		if message['turns'] == 1 then
			gui.set_text(node, 'in 1 turn')
		else
			gui.set_text(node, string.format('in %d turns', message['turns']))
		end
	elseif message_id == hash("end_screen") then
		end_screen = message['end_screen']
	elseif message_id == hash("thunder_been_used") then
		msg.post(".", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder_used")})
	elseif message_id == hash("thunder_not_used") then
		msg.post(".", "set_asset", {node_id = hash("thunder"), anim_id = hash("thunder")})
	end
end

function pick_hex(hex_x, hex_y, x, y)
	local a = 64
	local b = 70
	local t = a * b / (2 * a - b)
	return math.abs(hex_x - x) < a and math.abs(hex_y - y) < a and math.abs(hex_x - x) * a + math.abs(hex_y - y) * (t + a) < a * (t + a)
end

function open_shop(tile)
	shop_tile = tile
	if tonumber(gui.get_text(gui.get_node("coins"))) < BUY_TILE_COST then
		gui.set_color(gui.get_node(string.format("cost_tile%d", tile)), vmath.vector3(1, 0, 0))
	else
		gui.set_color(gui.get_node(string.format("cost_tile%d", tile)), vmath.vector3(1, 1, 1))
	end
	local node = gui.get_node(string.format("shop_tile%d", tile))
	local wood = gui.get_node(string.format("wood_tile%d", tile))
	local rock = gui.get_node(string.format("rock_tile%d", tile))
	local water = gui.get_node(string.format("water_tile%d", tile))
	gui.set_position(gui.get_node(string.format("coins_tile%d", tile)), vmath.vector3(0))
	gui.set_position(gui.get_node(string.format("cost_tile%d", tile)), vmath.vector3(0))
	gui.set_position(wood, vmath.vector3(0))
	gui.set_position(rock, vmath.vector3(0))
	gui.set_position(water, vmath.vector3(0))
	gui.animate(wood, gui.PROP_POSITION, vmath.vector3(-6 * (128 + 32), 0, 0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(rock, gui.PROP_POSITION, vmath.vector3(-4 * (128 + 32), 0, 0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(water, gui.PROP_POSITION, vmath.vector3(-2 * (128 + 32), 0, 0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(node, gui.PROP_SIZE, vmath.vector3(256*4+64*3+88, 320, 0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
end

function close_shop(tile)
	shop_tile = nil
	local node = gui.get_node(string.format("shop_tile%d", tile))
	local wood = gui.get_node(string.format("wood_tile%d", tile))
	local rock = gui.get_node(string.format("rock_tile%d", tile))
	local water = gui.get_node(string.format("water_tile%d", tile))
	gui.animate(wood, gui.PROP_POSITION, vmath.vector3(0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(rock, gui.PROP_POSITION, vmath.vector3(0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(water, gui.PROP_POSITION, vmath.vector3(0), gui.EASING_LINEAR, SHOP_ANIM_DURATION)
	gui.animate(node, gui.PROP_SIZE, vmath.vector3(0, 320, 0), gui.EASING_LINEAR, SHOP_ANIM_DURATION, 0, function ()
		gui.set_position(gui.get_node(string.format("coins_tile%d", tile)), vmath.vector3(500, 0, 0))
		gui.set_position(gui.get_node(string.format("cost_tile%d", tile)), vmath.vector3(500, 0, 0))
		gui.set_position(wood, vmath.vector3(500, 0, 0))
		gui.set_position(rock, vmath.vector3(500, 0, 0))
		gui.set_position(water, vmath.vector3(500, 0, 0))
	end)
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	-- msg.post(".", "acquire_input_focus")
	-- print("gui input")
	local node, ability
	if action_id == hash("touch_left") and action.pressed then
		if shop_tile then
			local buy;
			node = gui.get_node(string.format("gui_tile%d", shop_tile))
			if pick_hex(1320, 128 + 160 * (shop_tile - 1), action.x, action.y) then
				buy = hash("wood")
			elseif pick_hex(1480, 128 + 160 * (shop_tile - 1), action.x, action.y) then
				buy = hash("rock")
			elseif pick_hex(1640, 128 + 160 * (shop_tile - 1), action.x, action.y) then
				buy = hash("water")
			end
			if buy ~= nil and buy ~= gui.get_flipbook(node) then
				local node_coins = gui.get_node("coins")
				local coins = tonumber(gui.get_text(node_coins))
				if coins >= BUY_TILE_COST then
					gui.play_flipbook(node, buy)
					gui.set_text(node_coins, tostring(coins - BUY_TILE_COST))
					msg.post("/game#board", "ability", { ability = hash("buy_tile")})
				end
			end
			close_shop(shop_tile)
			return true
		end
		if pick_hex(node1_pos.x, node1_pos.y, action.x, action.y) then
			node = node1
		elseif pick_hex(node2_pos.x, node2_pos.y, action.x, action.y) then
			node = node2
		elseif gui.pick_node(gui.get_node("thunder"), action.x, action.y) then
			ability = hash("thunder")
			msg.post("/cursor#cursor", "lightning")
		elseif gui.pick_node(gui.get_node("snow"), action.x, action.y) then
			ability = hash("snow")
		end
		if node then
			local type = gui.get_flipbook(node)
			local pos = vmath.vector3(action.x, action.y, 0)
			local offset = pos - gui.get_position(node)
			msg.post("/game#board", "new_tile", { position = pos, type = type, offset = offset })
			gui.play_flipbook(node, hash("empty_hex"))
			active_node = node
			return true
		elseif ability then
			msg.post("/game#board", "ability", { ability = ability, action_x = action.x, action_y = action.y})
			return true
		end
	end
	if action_id == hash("touch_right") and action.pressed then
		if shop_tile then
			close_shop(shop_tile)
			return true
		end
		if pick_hex(node1_pos.x, node1_pos.y, action.x, action.y) then
			open_shop(1)
		elseif pick_hex(node2_pos.x, node2_pos.y, action.x, action.y) then
			open_shop(2)
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
