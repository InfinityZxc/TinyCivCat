local tile_types = {hash("wood"), hash("rock"), hash("water")}
local active_node = nil
local node1, node2, node1_pos, node2_pos


function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	node1 = gui.get_node("gui_tile1")
	node1_pos = gui.get_position(node1)
	node2 = gui.get_node("gui_tile2")
	node2_pos = gui.get_position(node2)
	gui.play_flipbook(node1, tile_types[math.random(#tile_types)])
	gui.play_flipbook(node2, tile_types[math.random(#tile_types)])
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if active_node then
		if message_id == hash("gui_new_tile") then
			gui.play_flipbook(active_node, tile_types[math.random(#tile_types)])
			active_node = nil;
		elseif message_id == hash("gui_revert_tile") then
			gui.play_flipbook(active_node, message['tile_type'])
			active_node = nil;
		end
	elseif message_id == hash("set_asset") then
		gui.play_flipbook(gui.get_node(message.node_id), message.anim_id)
	elseif message_id == hash("gui_set_coins") then
		gui.set_text(gui.get_node("coins"), string.format("COINS: %d", message.coins))
	elseif message_id == hash("gui_set_income") then
		gui.set_text(gui.get_node("income"), string.format("INCOME PER TURN: %d", message.income))
	-- elseif message_id == hash("game_won") then
	-- 	top_bar = gui.get_node("top_bar")
	-- -- 	gui.set_text(top_bar, "YOU WON!")
	-- -- 	gui.set_size(top_bar, vmath.vector3(100, 100, 0))
	-- elseif message_id == hash("game_lost") then
	-- 	top_bar = gui.get_node("top_bar")
	-- 	gui.set_text(top_bar, "YOU LOST :(")
	-- 	gui.set_size(top_bar, vmath.vector3(100, 100, 0))
	end
end

function pick_hex(hex_x, hex_y, x, y)
	local a = 64
	local b = 70
	local t = a * b / (2 * a - b)
	return math.abs(hex_x - x) < a and math.abs(hex_y - y) < a and math.abs(hex_x - x) * a + math.abs(hex_y - y) * (t + a) < a * (t + a)
end


function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	-- msg.post(".", "acquire_input_focus")
	-- print("gui input")
	local node, ability
	if action_id == hash("touch_left") and action.pressed then
		if pick_hex(node1_pos.x, node1_pos.y, action.x, action.y) then
			node = node1
		elseif pick_hex(node2_pos.x, node2_pos.y, action.x, action.y) then
			node = node2
		elseif gui.pick_node(gui.get_node("thunder"), action.x, action.y) then
			ability = hash("thunder")
		elseif gui.pick_node(gui.get_node("snow"), action.x, action.y) then
			ability = hash("snow")
		end
		if node then
			local type = gui.get_flipbook(node)
			local pos = vmath.vector3(action.x, action.y, 0)
			local offset = pos - gui.get_position(node)
			msg.post("/game#board", "new_tile", { position = pos, type = type, offset = offset })
			gui.play_flipbook(node, hash("empty_hex"))
			active_node = node
			return true
		elseif ability then
			msg.post("/game#board", "ability", { ability = ability })
			return true
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
