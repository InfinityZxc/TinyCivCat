go.property("id_num", 0)
local hex_size = 0 
local boardwidth = 0
local boardheight = 0
local extrawidth = 0
local extraheight = 0 
local map_type = "hex"
go.property("x", 4)
go.property("y", 4)
go.property("relative_position_down", true)   -- false = relative_position_right and down 
go.property("previous_x", 4)
go.property("previous_y", 4)
go.property("can_move", true)
go.property("home_x", 4)
go.property("home_y", 4)
go.property("steps_count", 0)

function init(self)
	-- msg.post("#sprite", "play_animation", { id = hash("rock") })
	-- go.set("#sprite", "scale", vmath.vector3(0.25 , 0.25, 1))
end

function local_check_coord(self, x, y)
	if map_type == hash("hex") then
		-- looks a bit like hex(octagon actually, but we need more height), requires some rework, but you get the idea
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight or
		x + y < 3 or math.abs(boardwidth - 1 - x) + y < 3 or
		x + math.abs(boardheight - 1 - y) < 3 or math.abs(boardwidth - 1 - x) + math.abs(boardheight - 1 - y) < 3 or 
		(y%2 == 0 and x == 0) or (y%2 == 1 and x == 9)) and
		not (x == 0 and y == 4) and 
		not (x == 1 and y == 1) and 
		not (x == 2 and y == 0) and 
		not (x == 1 and y == 7) and 
		not (x == 2 and y == 8) and 
		not (x == 7 and y == 8) and 
		not (x == 7 and y == 0)
		then
			return false
		end
		if check_proximity_radius_1(self, x, y) then
			return true
		else
			return false
		end
	else
		if (x >= boardwidth or x < 0 or y < 0 or y >= boardheight) then
			return false
		end
		if check_proximity_radius_1(self, x, y) then
			return true
		else
			return false
		end
	end
end

function check_proximity_radius_1(self, x, y)
	local sdvig = -1 + (self.home_y%2)*2
	if (x == self.home_x and y == self.home_y) or
	(x == self.home_x+1 and y == self.home_y) or
	(x == self.home_x-1 and y == self.home_y) or
	(x == self.home_x and y == self.home_y+1) or
	(x == self.home_x and y == self.home_y-1) or
	(x == self.home_x+sdvig and y == self.home_y+1) or
	(x == self.home_x+sdvig and y == self.home_y-1) or
	
	(x == self.home_x and y == self.home_y+2) or
	(x == self.home_x-1 and y == self.home_y+2) then
		return true
	end
	if (self.home_y % 2 == 0) then
		if (x == self.home_x-2 and y == self.home_y+1) then
			return true
		end
		if self.relative_position_down then
			if (x == self.home_x-2 and y == self.home_y) or
			(x == self.home_x-2 and y == self.home_y-1) then
				return true
			end
		else
			if (x == self.home_x+1 and y == self.home_y+2) or
			(x == self.home_x+1 and y == self.home_y+1) then
				return true
			end
		end
	else   -- self.home_y % 2 == 1
		if (x == self.home_x-1 and y == self.home_y+1) then
			return true
		end
		if self.relative_position_down then
			if (x == self.home_x-2 and y == self.home_y) or
			(x == self.home_x-1 and y == self.home_y-1) then
				return true
			end
		else
			if (x == self.home_x+1 and y == self.home_y+2) or
			(x == self.home_x+2 and y == self.home_y+1) then
				return true
			end
		end
	end
	return false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function local_return_coords_from_hex_index(self, x, y)
	local pos = vmath.vector3(0, 0, 0)
	pos.x = 64+hex_size*x +extrawidth
	pos.y = 64+3*hex_size*y/4 +extraheight
	if y%2==1 then
		pos.x = pos.x + hex_size/2
	end
	pos.z = 1 / (y + 3)
	return pos
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init_vals") then 
		hex_size = go.get("/game#board", "hex_size")
		boardwidth = go.get("/game#board", "boardwidth")
		boardheight = go.get("/game#board", "boardheight")
		extrawidth = go.get("/game#board", "extrawidth")
		extraheight = go.get("/game#board", "extraheight")
		map_type = go.get("/game#board", "map_type")

		local pos = vmath.vector3(0,0,0)
		pos.x = 64 + hex_size * self.home_x + extrawidth
		pos.y = 64 + 3 * hex_size * self.home_y / 4+ extraheight
		if self.home_y%2==1 then
			pos.x = pos.x + hex_size/2
		end
		if not self.relative_position_down then
			pos.x = pos.x + hex_size/2
			pos.y = pos.y - hex_size/4
		else
			pos.y = pos.y - hex_size/2
		end
		go.set(".", "position", pos)

		timer.delay(1, false, function ()
			msg.post("#", "move")
		end)
	elseif message_id == hash("move") then 
		self.can_move = true
		local pos = vmath.vector3(0,0,0)
		local previous = vmath.vector({0,0})
		local x_y_index_vec = vmath.vector()
		local possible_next = {}
		local x = self.x
		local y = self.y
		previous[1] = self.previous_x
		previous[2] = self.previous_y
		
		if (previous[1] ~= x or previous[2] ~= y) and local_check_coord(self, x, y) then
			table.insert(possible_next, vmath.vector({x, y}))
		end
		if self.relative_position_down then
			if (previous[1] ~= x-1 or previous[2] ~= y) and local_check_coord(self, x-1,y) then
				table.insert(possible_next, vmath.vector({x-1, y}))
			end
			if (previous[1] ~= x+(y%2)-1 or previous[2] ~= y-1) and local_check_coord(self, x+(y%2)-1, y-1) then
				table.insert(possible_next, vmath.vector({x+(y%2)-1, y-1}))
			end
		else
			if (previous[1] ~= x+1 or previous[2] ~= y) and local_check_coord(self, x+1,y) then
				table.insert(possible_next, vmath.vector({x+1, y}))
			end
			if (previous[1] ~= x+(y%2) or previous[2] ~= y+1) and local_check_coord(self, x+(y%2), y+1) then
				table.insert(possible_next, vmath.vector({x+(y%2), y+1}))
			end
		end

		if (#possible_next == 0) then
			x_y_index_vec = previous
		else
			math.randomseed(os.time())
			local random_pick = (math.random(#possible_next) + math.random(#possible_next)) % (#possible_next) + 1
			x_y_index_vec = possible_next[random_pick]
		end
		
		self.previous_x = x
		self.previous_y = y
		
		self.x = x_y_index_vec[1]
		self.y = x_y_index_vec[2]
		x = self.x
		y = self.y 
		self.relative_position_down = not self.relative_position_down
		
		pos.x = 64 + hex_size * x + extrawidth
		pos.y = 64 + 3 * hex_size * y / 4+ extraheight

		if y%2==1 then
			pos.x = pos.x + hex_size/2
		end

		if not self.relative_position_down then
			pos.x = pos.x + hex_size/2
			pos.y = pos.y - hex_size/4
		else
			pos.y = pos.y - hex_size/2
		end
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, pos, go.EASING_LINEAR, 2)

		self.steps_count = self.steps_count + 1
		local delay_time = 1.25
		if self.steps_count == 10 then
			self.steps_count = 0
			delay_time = 3.5
			timer.delay(2.5, false, function ()
				msg.post("/game#board", "resource_collected", { x = x, y = y})
			end)
		end
		timer.delay(delay_time, false, function ()
			if self.can_move then
				msg.post("#", "move")
			end
		end)
	elseif message_id == hash("stop") then 
		self.can_move = false
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
