local step = hash("start")
local skip = false;
local TILES_TEXT = "The objective is to fill the whole map.\nTheese are your tiles to build the world with.\nEvery turn you can drag one of the available tiles\nto place it adjacent with any other tile on the map.\nRight click on the tile to change it for 50 coins.\nClick anywhere to continue..."
local COINS_TEXT = "Every 15 turns a village will spawn on the newly placed tile.\nYou can increase your per turn income\nby surrounding them with diverse resources.\nVillages grow in efficiency and resource pool area\nif provided with enough resources.\nClick anywhere to continue..."
local CORRUPTION_TEXT = "Oh no! Your tile became corrupted.\nCurruption blocks village supply and can destroy them directly.\nCorruption will spread to one adjacent tile every turn.\nEvery 10 turns the number of tiles taken\nby corruption per turn will increase by 1.\nKeep an eye on it! Click anywhere to continue..."
local ABILITIES_TEXT = "To fight back against corruption you have two abilities.\nLightning will clear corruption from the tile of your choice.\nTo use it, click on the lightning and once again on the selected tile.\nFreeze will stop corruption spread for 1 turn.\nDrag the map around to see the rest of the world.\nGood luck! Click anywhere to continue..."

-- function init(self)
-- end

function hide_tutorial()
	local node = gui.get_node("shadow1")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow2")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow3")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow4")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)

	local node = gui.get_node("text")
	local pos = gui.get_position(node)
	pos.y = pos.y - 1080
	gui.set_position(node, pos)
end

function show_tutorial()
	local node = gui.get_node("shadow1")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow2")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow3")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("shadow4")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)

	local node = gui.get_node("text")
	local pos = gui.get_position(node)
	pos.y = pos.y + 1080
	gui.set_position(node, pos)
end

function tutorial_tiles()
	local node = gui.get_node("shadow1")
	local size = gui.get_size(node)
	size.x = 1721
	gui.set_size(node, size)

	local node = gui.get_node("shadow2")
	local size = gui.get_size(node)
	size.x = 199
	size.y = 49
	gui.set_size(node, size)

	local node = gui.get_node("shadow3")
	local size = gui.get_size(node)
	size.x = 199
	size.y = 702
	gui.set_size(node, size)

	local node = gui.get_node("shadow4")
	local size = gui.get_size(node)
	size.x = 41
	size.y = 329
	gui.set_size(node, size)
	local pos = gui.get_position(node)
	pos.y = 378
	gui.set_position(node, pos)

	local t = gui.get_node("text")
	gui.set_text(t, TILES_TEXT)
	step = hash("tiles")
end

function tutorial_coins()
	local node = gui.get_node("shadow1")
	local size = gui.get_size(node)
	size.x = 1547
	gui.set_size(node, size)

	local node = gui.get_node("shadow2")
	local size = gui.get_size(node)
	size.x = 373
	size.y = 937
	gui.set_size(node, size)

	local node = gui.get_node("shadow3")
	local size = gui.get_size(node)
	size.x = 373
	size.y = 16
	gui.set_size(node, size)

	local node = gui.get_node("shadow4")
	local size = gui.get_size(node)
	size.x = 30
	size.y = 127
	gui.set_size(node, size)
	local pos = gui.get_position(node)
	pos.y = 1064
	gui.set_position(node, pos)

	local t = gui.get_node("text")
	gui.set_text(t, COINS_TEXT)
	step = hash("coins")
end

function tutorial_corruption()
	local node = gui.get_node("shadow1")
	local size = gui.get_size(node)
	size.x = 840
	gui.set_size(node, size)

	local node = gui.get_node("shadow2")
	local size = gui.get_size(node)
	size.x = 1080
	size.y = 484
	gui.set_size(node, size)

	local node = gui.get_node("shadow3")
	local size = gui.get_size(node)
	size.x = 1080
	size.y = 455
	gui.set_size(node, size)

	local node = gui.get_node("shadow4")
	local size = gui.get_size(node)
	size.x = 1920 - 840 - 128
	size.y = 141
	gui.set_size(node, size)
	local pos = gui.get_position(node)
	pos.y = 1080 - 455
	gui.set_position(node, pos)

	local t = gui.get_node("text")
	gui.set_text(t, CORRUPTION_TEXT)
	step = hash("corruption")
end

function tutorial_abilities()
	msg.post("/gui#main", "show_abilities")
	local node = gui.get_node("shadow1")
	local size = gui.get_size(node)
	size.x = 1720
	gui.set_size(node, size)

	local node = gui.get_node("shadow2")
	local size = gui.get_size(node)
	size.x = 200
	size.y = 380
	gui.set_size(node, size)

	local node = gui.get_node("shadow3")
	local size = gui.get_size(node)
	size.x = 200
	size.y = 370
	gui.set_size(node, size)

	local node = gui.get_node("shadow4")
	local size = gui.get_size(node)
	size.x = 40
	size.y = 330
	gui.set_size(node, size)
	local pos = gui.get_position(node)
	pos.y = 710
	gui.set_position(node, pos)

	local t = gui.get_node("text")
	gui.set_text(t, ABILITIES_TEXT)
	step = hash("abilities")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("corruption") then
		if skip then
			msg.post("/gui#main", "show_abilities")
		else
			msg.post(".", "acquire_input_focus")
			msg.post('/camera_body', 'tutorial_corruption', message)
			show_tutorial()
			tutorial_corruption()
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action_id == hash("touch_left") and action.pressed then
		if step == hash("start") then
			if gui.pick_node(gui.get_node("play_without_tutorial"), action.x, action.y) then
				hide_tutorial()
				msg.post(".", "release_input_focus")
				msg.post("/camera_body", "acquire_input_focus")
				msg.post("/gui#main", "acquire_input_focus")
				msg.post("/cursor#cursor", "acquire_input_focus")
				skip = true
				gui.delete_node(gui.get_node("play_without_tutorial"))
				gui.delete_node(gui.get_node("play_with_tutorial"))
			elseif gui.pick_node(gui.get_node("play_with_tutorial"), action.x, action.y) then
				gui.set_font(gui.get_node("text"), hash("main"))
				gui.set_scale(gui.get_node("text"), vmath.vector3(1))
				tutorial_tiles()
				gui.delete_node(gui.get_node("play_without_tutorial"))
				gui.delete_node(gui.get_node("play_with_tutorial"))
			end
		elseif step == hash("tiles") then
			tutorial_coins()
		elseif step == hash("coins") then
			hide_tutorial()
			msg.post(".", "release_input_focus")
		elseif step == hash("corruption") then
			tutorial_abilities()
		elseif step == hash("abilities") then
			hide_tutorial()
			msg.post(".", "release_input_focus")
			msg.post("/camera_body", "acquire_input_focus")
			msg.post("/cursor#cursor", "acquire_input_focus")
			skip = true
		end
	end
	return true;
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
