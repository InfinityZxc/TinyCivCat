go.property("x", 0)
go.property("y", 0)
go.property("human_count", 0)
go.property("visible_stats", false)
go.property("wood", 0)
go.property("rock", 0)
go.property("water", 0)
go.property("resource_equal_max", 2)
go.property("control_radius", 1)
go.property("income", 0)
go.property("max_upgrade", 0)
go.property("id", 0)
go.property("show_hide_possible", true)
local show_hide_time = 1
local hex_size = 128

function init(self)
	sprite.play_flipbook("#sprite", hash("village1"))
	msg.post("#sprite" , "disable")
	timer.delay(0.5, false, function ()
		msg.post("#sprite" , "enable")
	end)
	
	self.stats_labels = {}
	create_labels(self)
	
	self.humans = {}
	timer.delay(0.5, false, function ()
		msg.post("#", "create_human")
	end)
end

function create_labels(self)
	local village_pos = go.get_position(".")
	local pos = vmath.vector3(village_pos.x, village_pos.y, 0)
	local id_stat_label
	village_pos.z = 0

	pos.x = pos.x
	pos.y = pos.y + hex_size/2
	id_stat_label = factory.create("#stats_factory", village_pos, null, {type = hash("resource_wood"), count = 0, 
	offset_x = pos.x - village_pos.x, offset_y = pos.y - village_pos.y})
	self.stats_labels["wood"] = {id = id_stat_label}
	
	pos.x = pos.x + hex_size/2
	pos.y = pos.y - hex_size/4
	id_stat_label = factory.create("#stats_factory", village_pos, null, {type = hash("resource_rock"), count = 0, 
	offset_x = pos.x - village_pos.x, offset_y = pos.y - village_pos.y})
	self.stats_labels["rock"] = {id = id_stat_label}
	
	pos.x = pos.x
	pos.y = pos.y - hex_size/2
	id_stat_label = factory.create("#stats_factory", village_pos, null, {type = hash("resource_water"), count = 0, 
	offset_x = pos.x - village_pos.x, offset_y = pos.y - village_pos.y})
	self.stats_labels["water"] = {id = id_stat_label}

	pos.x = pos.x - hex_size/2
	pos.y = pos.y - hex_size/4
	id_stat_label = factory.create("#stats_factory", village_pos, null, {type = hash("coin"), count = 0, 
	offset_x = pos.x - village_pos.x, offset_y = pos.y - village_pos.y})
	self.stats_labels["coin"] = {id = id_stat_label}
end

function final(self)
	while (#self.humans ~= 0) do
		go.delete(self.humans[#self.humans])
		table.remove(self.humans)
	end
	go.delete(self.stats_labels["coin"])
	go.delete(self.stats_labels["wood"])
	go.delete(self.stats_labels["rock"])
	go.delete(self.stats_labels["water"])
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function grow(self)
	if self.control_radius < 2 then
		self.control_radius = self.control_radius + 1
		self.resource_equal_max = self.resource_equal_max + 2 * self.control_radius + (self.control_radius - 1) * 2
		msg.post("#", "create_human")
		msg.post("/game#board", "village_grow", {id = self.id, x = self.x, y = self.y})
		sprite.play_flipbook("#sprite", hash("village2"))
		msg.post(msg.url(nil, self.stats_labels["coin"].id, "stats_label"), "update_needed", {info = self.resource_equal_max})
		msg.post(msg.url(nil, self.stats_labels["wood"].id, "stats_label"), "update_needed", {info = self.resource_equal_max})
		msg.post(msg.url(nil, self.stats_labels["rock"].id, "stats_label"), "update_needed", {info = self.resource_equal_max})
		msg.post(msg.url(nil, self.stats_labels["water"].id, "stats_label"), "update_needed", {info = self.resource_equal_max})
	elseif self.max_upgrade == 0 then
		msg.post("#", "create_human")
		self.max_upgrade = 1
		sprite.play_flipbook("#sprite", hash("village3"))
	end
end

function update_labels_and_income(self)
	self.income = 5 * self.water + 10 * self.rock + 15 * self.wood + 10 * self.max_upgrade
	
	msg.post(msg.url(nil, self.stats_labels["coin"].id, "stats_label"), "update_count", {info = self.income})
	msg.post(msg.url(nil, self.stats_labels["wood"].id, "stats_label"), "update_count", {info = self.wood})
	msg.post(msg.url(nil, self.stats_labels["rock"].id, "stats_label"), "update_count", {info = self.rock})
	msg.post(msg.url(nil, self.stats_labels["water"].id, "stats_label"), "update_count", {info = self.water})
	
	msg.post("/game#board", "income_update", {id = self.id, income = self.income})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("create_human") then 
		self.human_count = self.human_count + 1
		local pos = vmath.vector3(0, 0, 0)
		local id_human = factory.create("#human_factory", pos, null, {
			id_num = self.human_count, x = self.x, y = self.y, previous_x = self.x, previous_y = self.y, 
			relative_position_down = true, home_x = self.x, home_y = self.y})
		self.humans[self.human_count] = {id = id_human}
		msg.post(msg.url(nil, id_human, "traveller"), "init_vals")
	elseif message_id == hash("change_stats_visibility") then
		if self.show_hide_possible then
			self.show_hide_possible = false
			if self.visible_stats then
				timer.delay(0, false, function ()
					msg.post(msg.url(nil, self.stats_labels["wood"].id, "stats_label"), "hide")
				end)
				timer.delay(0.1, false, function ()
					msg.post(msg.url(nil, self.stats_labels["rock"].id, "stats_label"), "hide")
				end)
				timer.delay(0.2, false, function ()
					msg.post(msg.url(nil, self.stats_labels["water"].id, "stats_label"), "hide")
				end)
				timer.delay(0.3, false, function ()
					msg.post(msg.url(nil, self.stats_labels["coin"].id, "stats_label"), "hide")
				end)
			else
				timer.delay(0, false, function ()
					msg.post(msg.url(nil, self.stats_labels["wood"].id, "stats_label"), "show")
				end)
				timer.delay(0.1, false, function ()
					msg.post(msg.url(nil, self.stats_labels["rock"].id, "stats_label"), "show")
				end)
				timer.delay(0.2, false, function ()
					msg.post(msg.url(nil, self.stats_labels["water"].id, "stats_label"), "show")
				end)
				timer.delay(0.3, false, function ()
					msg.post(msg.url(nil, self.stats_labels["coin"].id, "stats_label"), "show")
				end)
			end
			self.visible_stats = not self.visible_stats
			timer.delay(show_hide_time + 0.4, false, function ()
				self.show_hide_possible = true
			end)
		end
	elseif message_id == hash("get_resource") then
		if message["radius"] <= self.control_radius and message["radius"] ~= 0 then
			if message["tile_type"] == hash("water") then
				self.water = self.water + 1
			elseif message["tile_type"] == hash("wood") then
				self.wood = self.wood + 1
			elseif message["tile_type"] == hash("rock") then
				self.rock = self.rock + 1
			end
			msg.post("/game#board", "resource_collected", { x = message["x"], y = message["y"]})
		end
		
		if (self.rock >= self.resource_equal_max and self.water >= self.resource_equal_max 
		and self.wood >= self.resource_equal_max) then
			grow(self)
		end
		update_labels_and_income(self)
	elseif message_id == hash("lose_resource") then
		if message["radius"] <= self.control_radius and message["radius"] ~= 0 then
			if message["tile_type"] == hash("water") then
				self.water = self.water - 1
			elseif message["tile_type"] == hash("wood") then
				self.wood = self.wood - 1
			elseif message["tile_type"] == hash("rock") then
				self.rock = self.rock - 1
			end
		end
		update_labels_and_income(self)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
